AttachSpec("../spec");

QQ := Rationals();
P<t> := PolynomialRing(QQ);

function X7Twists(j : vars:=[])
  a := -27*j/(j-1728);
  b := -54*j/(j-1728);
  K := Universe([a,b]);
  if #vars eq 0 then
    R<x,y,z> := PolynomialRing(K,3);
  else
    x,y,z := Explode(vars);
  end if;
  // Halberstadt, Kraus : Equation for X_E(7)
  F := a*x^4 + 7*b*x^3*z + 3*x^2*y^2 - 3*a^2*x^2*z^2 - 6*b*x*y*z^2 
     - 5*a*b*x*z^3 + 2*y^3*z + 3*a*y^2*z^2 + 2*a^2*y*z^3 - 4*b^2*z^4;
  // Poonen, Schaefer, Stoll : Equation for X_E^-(7)
  G := -a^2*x^4 + 2*a*b*x^3*y - 12*b*x^3*z + (-6*a^3 - 36*b^2)*x^2*y^2 
    + 6*a*x^2*z^2 + 2*a^2*b*x*y^3 - 12*a*b*x*y^2*z + 18*b*x*y*z^2 
    + (3*a^4 + 19*a*b^2)*y^4 + (-8*a^3 - 42*b^2)*y^3*z 
    + 6*a^2*y^2*z^2 - 8*a*y*z^3 + 3*z^4;
  return F,G;
end function;

// Model for the modular curve X_1(7) \cong P1
j_X1 := (t^2 + t + 1)^(3)*(t^6 - 5*t^5 - 10*t^4 + 15*t^3 + 30*t^2 + 11*t + 1)^(3)/((t)^(7)*(t + 1)^(7)*(t^3 - 5*t^2 - 8*t - 1));

// Models for the twists of the modular curves, and our curve C
PP<x0,x1,x2> := PolynomialRing(QQ, 3);
C := HyperellipticCurve(Polynomial([ 1, -12, 36, 6, -72, -48, -7 ]));

XX := [
    x0^4 - 3*x0^3*x1 - 28*x0^3*x2 - 15*x0^2*x1^2 - 3*x0^2*x1*x2 + 39*x0^2*x2^2 - 6*x0*x1^3 - 
        12*x0*x1^2*x2 - 6*x0*x1*x2^2 - 29*x0*x2^3 + 3*x1^4 + 9*x1^3*x2 + 30*x1^2*x2^2 - 
        3*x1*x2^3 - 10*x2^4,
    -4*x0^4 + 6*x0^3*x1 + 7*x0^3*x2 + 3*x0^2*x1^2 + 12*x0*x1^3 + 6*x0*x1^2*x2 - 9*x0*x1*x2^2 - 
        x0*x2^3 - 6*x1^4 - 3*x1^3*x2 + 3*x1^2*x2^2 + 6*x1*x2^3 + x2^4,
    -2*x0^4 + 39*x0^3*x1 + 11*x0^3*x2 - 42*x0^2*x1^2 - 18*x0^2*x1*x2 + 20*x0*x1^3 - 
        6*x0*x1^2*x2 + 12*x0*x1*x2^2 - 7*x0*x2^3 - 24*x1^4 + 13*x1^3*x2 + 15*x1^2*x2^2 + 
        9*x1*x2^3 + x2^4,
    2*x0^4 + 5*x0^3*x1 + 9*x0^3*x2 + 6*x0^2*x2^2 - x0*x1^3 - 6*x0*x1^2*x2 + 12*x0*x1*x2^2 + 
        2*x0*x2^3 - x1^4 - 3*x1^3*x2 + 3*x1^2*x2^2 + 17*x1*x2^3 + 12*x2^4
];


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//                                   CASE X_2+ and X_2-                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

// Prove congruence
j := ModuliKleinQuarticTwist(XX[4]);
P := [0,-1,1];
assert Evaluate(XX[4], P) eq 0;
E := EllipticCurve("1242k1");
assert jInvariant(E) eq Evaluate(j, P);

OK := [
  [ 1, 1 ],
  [ -20478, -29103, 23751, -9009, 1911, 168, -98, -1, 1 ],
  [ -1117037, 815539, -81851, 16954, -3206, -161, -35, 4, 1 ],
  [ -112986, -37389, 30835, 4956, -4410, -1519, -147, 3, 1 ],
  [ -179978, -481879, 32095, -30016, -1820, 371, -77, -1, 1 ],
  [ -172808, -446501, -31262, 17381, 4991, -553, -98, 1, 1 ],
  [ 349827, -1078611, 91098, -18816, 4410, -462, 70, -1, 1 ],
  [ 10396, 577279, 145012, -16954, -3766, 140, 28, -2, 1 ]
];

tors_J := [
  [
    [129498599501904201095385, -17878190407781002358514, 45281886895657220792052, -101767505150227885176927, 6371884037764953709944, 75280425582358397359008, 142712398035404017139613, -217671657480674088107517],
    [-392415994734071260381635, 54175782081862587511632, -137216439425604142558008, 308383233482702685552528, -19308542540693362267200, -228120174747110092640493, -432457400798980367643708, 659604354754973311165161],
    [-92572857262250862888300, 12780332671262587260100, -32370030944987853267736, 72749117021579857431070, -4554979869837739566932, -53814667873353975071478, -102018821523204000642514, 155603901839457684685694],
    [88044619251748, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [146784204185524189535635, -20264589483790019840026, 51326159262052139859246, -115351535325933176873471, 7222409604117213220360, 85328933415045940168458, 161761794188263268136753, -246726691883265897424084],
    [-901509475712409721734192, 124459709798780539246536, -315231595758489980389106, 708458397654528344178952, -44358115568539011414272, -524067575431875491672664, -993497842817219733193952, 1515329607843974443573397],
    [-8874428432082014670534, 1225177201002689341033, -3103129021536402189197, 6974040111744600175902, -436659762767142687669, -5158903195295860595706, -9779958608487385531502, 14916852562904487539430],
    [88044619251748, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-10679428039898425606417472806, 1474369987226192241027919484, -3734284812012286127101534704, 8392513536266604032109614698, -525473459831722222772518544, -6208189832031664242790058496, -11769137216399624233451028030, 17950841274317962699237249850],
    [-292850847428617392377153901, 40430114693417645904353884, -102401408334353183862798236, 230139169538622977526141780, -14409512136004142786663580, -170240732541378706861701159, -322732808646082155690260864, 492247249352114137204678299],
    [1235392529898796021641000, -170554604974395385786392, 431980773224033093201330, -970843061403963699559279, 60786588074782042718168, 718161251303643644464821, 1361449720257397941343901, -2076547106383135417043369],
    [154078083690559, 0, 0, 0, 0, 0, 0, 0]
  ]
];

K := NumberField(Polynomial(OK[2]));
OK := Order([Roots(Polynomial(f), K)[1][1] : f in OK]);

Kum := KummerSurface(Jacobian(C));
f := DefiningPolynomial(Kum);
tors_J := [[OK!x : x in xi] : xi in tors_J];
tors_J := [Polynomial(g) : g in tors_J];

L := NumberField(tors_J[1]);
Kum_L := BaseChange(Kum, L);
xi := [[r[1] : r in Roots(t, L)] : t in tors_J];

assert exists(P){Kum_L![1,xi1,xi2,xi3] : xi1 in xi[1], xi2 in xi[2], xi3 in xi[3] | Evaluate(f, [1,xi1,xi2,xi3]) eq 0};
assert 7*P eq Kum_L![0,0,0,1];

tors_E := [
    [-2944, 0, 0, 0, 0, 0, 0, 0],
    [203345109425, -28073219513, 71103866458, -159800390283, 10005448771, 118209062519, 224094094190, -341798845690],
    [203345118257, -28073219513, 71103866458, -159800390283, 10005448771, 118209062519, 224094094190, -341798845690],
    [2944, 0, 0, 0, 0, 0, 0, 0]
];

tors_E := Polynomial([OK!x : x in tors_E]);
tors_E := Roots(tors_E, L)[1][1];
assert Evaluate(j_X1, tors_E) eq jInvariant(E);

// By definition now X_2- is isomorphic to X_E(7) and also to X_J^\pm(7) for some sign, to do the other
// one we just use the equations for X_E-(7)
_, X_E_minus := X7Twists(jInvariant(E) : vars:=[x0,x1,x2]);
// some linear transformation
trans := Matrix(QQ, 3,3, [ -13207816915317407232, -33019542288293518080, 60191873963035059, 0, 0, -8421504212123599249, 58596405429889451520, -74462612791975743744, 3513947568982387506 ]);

assert XX[3] eq -(X_E_minus^trans)/6982739381553762554999195266584722899241980187060220721499086528049693444800512;


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//                                   CASE X_1+ and X_1-                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

// These cases are more tricky. First we calculate the field generated by the image of a
// 7-torsion point on the Kummer surface, as above

OK := [
  [ 1, 1 ],
  [ -225747, 6021, -22022, 3129, -1407, 119, 0, 3, 1 ],
  [ -2499, 38745, -26159, 9072, -3339, 868, -84, 0, 1 ],
  [ -65555, 9268, 36400, -16534, 1526, 140, -119, -2, 1 ],
  [ -765549, -224694, -53487, 14091, 3738, 63, 91, 1, 1 ],
  [ 853225, 641080, 154483, -4690, -7924, -784, 28, -2, 1 ],
  [ 8400, -73920, 115024, -61110, 8127, 931, -189, -3, 1 ],
  [ -2362833, -978921, -76188, 43470, 8967, -588, -168, 3, 1 ]
];

tors_J := [
  [
    [-783466004953233957464286, -2245111863986265921314877, -325369960764338793780246, -66092745812439125065518, -2328534446218583234374902, -884639630777812878791007, -2191148437876621862488419, 3732411727314341949205797],
    [1657238844820477302952347, 4749008045407680271776933, 688243908853392857363343, 139803716455576150801746, 4925468974188052560599610, 1871247840790007129369790, 4634861067205798759282383, -7895042390863271857803231],
    [3401039434272262208594016, 9746068901379384290820785, 1412436552410187257610514, 286909737549810554596331, 10108207760310875158932317, 3840235730835704014153357, 9511812753928162113945461, -16202462990221424308475691],
    [10024078143599597, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [1379597420302850198176688, 3953394817133929197304076, 572940680068343150951761, 116382049078406810011461, 4100292802283515599470921, 1557752996338056934876054, 3858371166923862647298516, -6572366135866623115232112],
    [-2619700346009587676112186, -7507052154714719770910560, -1087949918140991526661469, -220996422682335502004063, -7785994908401797650757993, -2957997753544229283147068, -7326612929606959309941857, 12480184156970077537110936],
    [1677625518957567261723363, 4807428528097256184408681, 696710421463598103114663, 141523528236538518185002, 4986060209748382468155393, 1894267216072810793310333, 4691877355477563601590433, -7992164182940576162305464],
    [10024078143599597, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-37447408137512419719547360112, -107309847860214292933707702712, -15551742251613555779353985456, -3159041926443492029082292656, -111297205857351344863116295552, -42283213484594387412601692968, -104730552364450332380423387640, 178398475929807306249177427656],
    [-2021344460398538851451514420, -5792394650462478364268807724, -839455375517680067465114268, -170519462272520471056626032, -6007625140528630711342294104, -2282372629173806867119694424, -5653168869059092898710530500, 9629632305427617189308846460],
    [-32453876910411864856528884, -93000311149021343355599630, -13477950982822626278454520, -2737790499187030318570546, -96455963576413895716457186, -36644838191023505334471214, -90764959159260719004930706, 154609424053230139091547102],
    [10024078143599597, 0, 0, 0, 0, 0, 0, 0]
  ]
];

K := NumberField(Polynomial(OK[2]));
OK := Order([Roots(Polynomial(f), K)[1][1] : f in OK]);

Kum := KummerSurface(Jacobian(C));
f := DefiningPolynomial(Kum);
tors_J := [[OK!x : x in xi] : xi in tors_J];
tors_J := [Polynomial(g) : g in tors_J];

L := NumberField(tors_J[1]);
Kum_L := BaseChange(Kum, L);
xi := [[r[1] : r in Roots(t, L)] : t in tors_J];

assert exists(P){Kum_L![1,x1,x2,x3] : x1 in xi[1], x2 in xi[2], x3 in xi[3] | Evaluate(f, [1,x1,x2,x3]) eq 0};
assert 7*P eq Kum_L![0,0,0,1];

//////////////////////////////////////////////////
// The case X_1+
//////////////////////////////////////////////////

// Take hyperplane sections to get points
_<x> := PolynomialRing(QQ);
F1 := NumberField(Evaluate(XX[1], [x,0,1]));
F2 := NumberField(Evaluate(XX[1], [x,1,0]));
assert Degree(F1) eq 4; assert #Subfields(F1) eq 1;
assert Degree(F2) eq 4; assert #Subfields(F2) eq 1;
assert not IsSquare(Discriminant(F1)/Discriminant(F2));
// The above suffices to show that F1 cap F2 = QQ

j := ModuliKleinQuarticTwist(XX[1]);

// we check that j1 lifts to a (L.F1)-rational point on X_1(7)
LF1 := ext<L | DefiningPolynomial(F1)>;
j1 := Evaluate(j, [LF1.1, 0, 1]);

tors_E := [
  [
    [-4195281794335241521133219, -12022061670785248109240900, -1742281889201826647565400, -353911571464861312878080, -12468770565194212890845960, -4737043339375292112194940, -11733099843198295182833130, 19986213026688277735252160],
    [-5756647505205008010766032, -16496334309686559691362564, -2390710120454152202508582, -485627487083534503263786, -17109295668061214933987910, -6500037406419921770013096, -16099829030510341900829496, 27424518413484014300935179],
    [-5513980591901316820846635, -15800944436092654333766304, -2289931634060723044383942, -465156245996213896443216, -16388066895192717712016910, -6226033491053718991832316, -15421153522167627230889426, 26268459616831781555604009],
    [8664678775602099, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-18655639099869000452655803, -53459875745743692070072628, -7747604018139147758173507, -1573779036589649851778729, -55446307246660993295634266, -21064752058964807754723042, -52174916160389204937563790, 88874977880260336955207201],
    [-11927822074204658394535128, -34180543650516779900678787, -4953571510436998001147856, -1006224244159276437680745, -35450604749606483153344419, -13468132261151756156062578, -33358981373065704862076829, 56823833171584272057388245],
    [17758413996472021165546806, 50888774275044518832701784, 7374990431439819456594168, 1498089642772450129754823, 52779670254266844319106190, 20051663002798616055858558, 49665613586106987047056347, -84600621020756821558872483],
    [8664678775602099, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-1478044201076895533537080, -4235505412939001533860232, -613825196762049890423474, -124686964565879456059408, -4392885899536695101554531, -1668912807578137573336293, -4133700960296825436013770, 7041364096889750059012111],
    [-15841753834867798783979511, -45396364515123625012827636, -6579009982556091076927446, -1336401288319464000757035, -47083176677209085372148168, -17887493182211577339925521, -44305219187448527087595138, 75469702014663824813605776],
    [-7790619356931407914576494, -22324914275662183891790316, -3235409606705159766981642, -657212191308689142735708, -23154450675104510834301012, -8796668105643847415067885, -21788313464034100689134127, 37114307404183917864365499],
    [8664678775602099, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [100747704473766113717, 288704117051928496109, 41840074372018580200, 8499018770227259051, 299431619473913537072, 113757852164296291044, 281764835524921373538, -479959439661250448684],
    [-21343870414894858089606, -61163311316924350517418, -8864014553056698771390, -1800556694678017390476, -63435982675152618746982, -24100130613275689843302, -59693192242787346308541, 101681641880770895355897],
    [267901851942973191601377, 767703516910002931781226, 111258448880867929550832, 22600046942929380908457, 796229405220751865938056, 302497602381557441055798, 749251023643769224716387, -1276277434704469928632410],
    [8664678775602099, 0, 0, 0, 0, 0, 0, 0]
  ]
];
tors_E := [Polynomial([OK!a : a in t]) : t in tors_E];
tors_E := [[r[1] : r in Roots(t, L)] : t in tors_E];
possible_tors_E := [LF1![a,b,c,d] : a in tors_E[1], b in tors_E[2], c in tors_E[3], d in tors_E[4]];

found_tors := false;
i := 1;
while not found_tors do
  t := possible_tors_E[i];
  if Evaluate(j_X1, t) - j1 eq 0 then
    found_tors := true;
  end if;
  i +:= 1;
end while;
assert found_tors;


// we check that j2 lifts to a (L.F2)-rational point on X_1(7)
LF2 := ext<L | DefiningPolynomial(F2)>;
j2 := Evaluate(j, [LF2.1, 1, 0]);

tors_E := [
  [
    [1087575089418230485, 3116571296198194200, 451665102925841199, 91747212372672933, 3232375070719507836, 1228020093807488226, 3041661504407346882, -5181179363900030274],
    [629267695324857885, 1803238836981645707, 261332078707494682, 53084662879931904, 1870242555272313515, 710528756075196088, 1759896255791026681, -2997814894884623427],
    [-31003929998696196, -88845318656836156, -12875793982806014, -2615473720425174, -92146582414618318, -35007649888036442, -86709836067974030, 147701909838156096],
    [557407829, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-1628070015995451832, -4665421564756995553, -676130244534092523, -137343055091863550, -4838776636405046650, -1838312327298794614, -4553283669552415921, 7756083098820998518],
    [-165411924440578731, -474006879941106364, -68694838701941944, -13954055981075916, -491619758029858764, -186772552127294264, -462613669538371859, 788018125814073822],
    [974045163074504707, 2791238263629109548, 404516629899979778, 82169892935171674, 2894953498952130820, 1099829379192696115, 2724148164168942603, -4640325766672948387],
    [557407829, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-228481001277875084, -654738540608352130, -94887144510246981, -19274526475468730, -679066941621960838, -257986103440073270, -639001269980886870, 1088477527408615754],
    [-1047940255581822942, -3002993168975395443, -435204937070085014, -88403641752418430, -3114576672505794549, -1183266995282118599, -2930813336950213013, 4992360115956947991],
    [5184277600067327250, 14856142744019902342, 2153007457142638148, 437342692829933839, 15408158801194395646, 5853754036109167571, 14499061047691175914, -24697763307117961776],
    [1672223487, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [16426628633733206, 47072390357239169, 6821905885804474, 1385740991381822, 48821479374658184, 18547896320749230, 45940960177265175, -78256030292427986],
    [-277155797258034891, -794221766414838747, -115101571946679924, -23380704695672373, -823733004889717911, -312946567093174911, -775131881686269399, 1320363000246354255],
    [-2986026107836532589, -8556800681460585066, -1240083377904997254, -251899454425281903, -8874749388316362450, -3371629324542055626, -8351129737459124523, 14225350519207859958],
    [5016670461, 0, 0, 0, 0, 0, 0, 0]
  ]
];
tors_E := [Polynomial([OK!a : a in t]) : t in tors_E];
tors_E := [[r[1] : r in Roots(t, L)] : t in tors_E];
possible_tors_E := [LF2![a,b,c,d] : a in tors_E[1], b in tors_E[2], c in tors_E[3], d in tors_E[4]];

found_tors := false;
i := 1;
while not found_tors do
  t := possible_tors_E[i];
  if Evaluate(j_X1, t) - j2 eq 0 then
    found_tors := true;
  end if;
  i +:= 1;
end while;
assert found_tors;


//////////////////////////////////////////////////
// The case X_1-
//////////////////////////////////////////////////

_<x> := PolynomialRing(QQ);
F1 := NumberField(Evaluate(XX[2], [x,0,1]));
F2 := NumberField(Evaluate(XX[2], [x,1,0]));
assert Degree(F1) eq 4; assert #Subfields(F1) eq 1;
assert Degree(F2) eq 4; assert #Subfields(F2) eq 1;
assert not IsSquare(Discriminant(F1)/Discriminant(F2));
// The above suffices to show that F1 cap F2 = QQ
j := ModuliKleinQuarticTwist(XX[2]);

// we check that j1 lifts to a (L.F1)-rational point on X_1(7)
LF1 := ext<L | DefiningPolynomial(F1)>;
j1 := Evaluate(j, [LF1.1, 0, 1]);

tors_E := [
  [
    [-1063567811824620758, -3047775696272517342, -441694988594295981, -89721972470983961, -3161023202182197432, -1200912618230545508, -2974519471994120682, 5066809335451317143],
    [-733564732276666854, -2102113960265065437, -304646173165286199, -61883100879802515, -2180223108786184272, -828294281449209837, -2051587627033594374, 3494683238426367264],
    [1449275163201987030, 4153064401209250593, 601877538544620978, 122260024020131469, 4307381593403552379, 1636428642304803480, 4053241499150212569, -6904309102729218702],
    [2707574283, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [1727347845165453868, 4949913570338743467, 717359884119793977, 145718075524992667, 5133839628758463255, 1950410482878655318, 4830937631626789152, -8229040058863973521],
    [-2007164359235922030, -5751759990572832411, -833566449572303787, -169323238672172892, -5965480602747886824, -2266361387255058336, -5613510903800606271, 9562078755855689850],
    [4581500780513510757, 13128816515165550729, 1902676917330767403, 386492783958766935, 13616649572729603436,  5173137064788375267, 12813252768704313054, -21826150192404841455],
    [2707574283, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [-8549254783302241933, -24498871485697730604, -3550467553289133519, -721210250077367281, -25409186529926101674, -9653270720054437225, -23910017506016116500, 40728427247112853345],
    [-2679365195905405599, -7678028648346785505, -1112728468751687511, -226029716628079212, -7963324467407772948, -3025367491606107921, -7493479856103851451, 12764426001371927973],
    [-5967153178057223928, -17099562597640713774, -2478132206720240652, -503385628636204884, -17734938369610307886, -6737726966647216023, -16688558147382164286, 28427362137823348062],
    [2707574283, 0, 0, 0, 0, 0, 0, 0]
  ],
  [
    [3856676271980303552, 11051748698204771328, 1601660521299406656, 325347003994197440, 11462403256021698432, 4354711694592460736, 10786109275405057536, -18373105197115070912],
    [-2860310311707716784, -8196547634059037328, -1187874167677114032, -241294142065067712, -8501110271966145024, -3229679107561040208, -7999535726303019120, 13626443759714807760],
    [1236991191573271248, 3544740309714129720, 513716948642678688, 104351869811458944, 3676453744442779656, 1396731187857291156, 3459539064163619880, -5892993806798296152],
    [2707574283, 0, 0, 0, 0, 0, 0, 0]
  ]
];
tors_E := [Polynomial([OK!a : a in t]) : t in tors_E];
tors_E := [[r[1] : r in Roots(t, L)] : t in tors_E];
possible_tors_E := [LF1![a,b,c,d] : a in tors_E[1], b in tors_E[2], c in tors_E[3], d in tors_E[4]];

found_tors := false;
i := 1;
while not found_tors do
  t := possible_tors_E[i];
  if Evaluate(j_X1, t) - j1 eq 0 then
    found_tors := true;
  end if;
  i +:= 1;
end while;
assert found_tors;


// we check that j2 lifts to a (L.F2)-rational point on X_1(7)
LF2 := ext<L | DefiningPolynomial(F2)>;
j2 := Evaluate(j, [LF2.1, 1, 0]);

tors_E := [
    [
      [-2423589285195669294983305, -6945073372335834356723700, -1006505863071228337418328, -204452605390036018937016, -7203134437902730776672300, -2736561702957419239081344, -6778141846621489768786416, 11545916141694088684517268],
      [761627027069346514111578, 2182529695987160488638734, 316300320733365790233226, 64250420249913800463778, 2263626887714153866592720, 859980429923077920501307, 2130070494309810970616604, -3628371294037587428942010],
      [-29803233264179672610195, -85404590189775768221194, -12377149913328956876678, -2514183786314257961390, -88578002503368883933720, -33651901336527887361413, -83351806182100880932548, 141981827204120884280382],
      [384311065257889, 0, 0, 0, 0, 0, 0, 0]
    ],
    [
      [-1475298987411321654028442, -4227638649235954176614676, -612685115883583939090712, -124455378690527410743250, -4384726828394399705120820, -1665813073457905107800311, -4126023283030103901950030, 7028285908221941524040834],
      [-430820284561770018574776, -1234564990651454179424748, -178917749303195809190376, -36343752682960162855464, -1280438250182557741085812, -486454655079349434635552, -1204891031876022825822064, 2052416595685206397500012],
      [77637788474083923238172, 222479994278277258919292, 32242628578173724636104, 6549479337691942895284, 230746779793036915197388, 87663614512732489379618, 217132474415187158526780, -369864396167464595133776],
      [384311065257889, 0, 0, 0, 0, 0, 0, 0]
    ],
    [
      [-745620527015826206837168, -2136661226731709576546272, -309652892225539468428096, -62900120860605748715056, -2216054064108972582988768, -841906913688529290862760, -2085304517879302138783952, 3552116736142855990847024],
      [-938570305588719186584496, -2689580993419777233410448, -389784079931294188004704, -79177254331021835964448, -2789518901860754169415152, -1059773444789402234192320, -2624934320434199692971136, 4471324476086704695879888],
      [202308742694116643910264, 579738928120208696603336, 84017922362710987261936, 17066649706199964920120, 601280537726765904231080, 228434066644910141381932, 565804346617537822241576, -963793571524736757151392],
      [1152933195773667, 0, 0, 0, 0, 0, 0, 0]
    ],
    [
      [1384449574688746350722944, 3967299167978419135601664, 574955751937984860652032, 116791372570150923036544, 4114713806224995821654016, 1563231717778194093612352, 3871941316283706865183872, -6595481586986832366461056],
      [-2916603897065484783769728, -8357863309180574575275072, -1211252634974409612117120, -246043034780498678322624, -8668420014370291286442048, -3293242190748763973262144, -8156974015996252955010240, 13894624823411108385455040],
      [1008078536332907597978712, 2888764808374498317857328, 418650537210616748326272, 85040928954837982601712, 2996103872209876016413584, 1138257682897790490276984, 2819330557888279123352304, -4802459867862417719676288],
      [3458799587321001, 0, 0, 0, 0, 0, 0, 0]
    ]
];
tors_E := [Polynomial([OK!a : a in t]) : t in tors_E];
tors_E := [[r[1] : r in Roots(t, L)] : t in tors_E];
possible_tors_E := [LF2![a,b,c,d] : a in tors_E[1], b in tors_E[2], c in tors_E[3], d in tors_E[4]];

found_tors := false;
i := 1;
while not found_tors do
  t := possible_tors_E[i];
  if Evaluate(j_X1, t) - j2 eq 0 then
    found_tors := true;
  end if;
  i +:= 1;
end while;
assert found_tors;

